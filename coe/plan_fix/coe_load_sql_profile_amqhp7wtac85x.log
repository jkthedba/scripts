SQL>GET coe_load_sql_profile.log;
  1  SQL>SET SERVEROUT ON SIZE UNL;
  2  SQL>REM
  3  SQL>REM $Header: 215187.1 coe_load_sql_profile.sql 11.4.5.5 2013/03/01 carlos.sierra $
  4  SQL>REM
  5  SQL>REM Copyright (c) 2000-2013, Oracle Corporation. All rights reserved.
  6  SQL>REM
  7  SQL>REM AUTHOR
  8  SQL>REM   carlos.sierra@oracle.com
  9  SQL>REM
 10  SQL>REM SCRIPT
 11  SQL>REM   coe_load_sql_profile.sql
 12  SQL>REM
 13  SQL>REM DESCRIPTION
 14  SQL>REM   This script loads a plan from a modified SQL into a Custom SQL
 15  SQL>REM   Profile for the original SQL.
 16  SQL>REM   If a good performing plan only reproduces with CBO Hints
 17  SQL>REM   then you can load the plan of the modified version of the
 18  SQL>REM   SQL into a Custom SQL Profile for the orignal SQL.
 19  SQL>REM   In other words, the original SQL can use the plan that was
 20  SQL>REM   generated out of the SQL with hints.
 21  SQL>REM
 22  SQL>REM PRE-REQUISITES
 23  SQL>REM   1. Have in cache or AWR the text for the original SQL.
 24  SQL>REM   2. Have in cache or AWR the plan for the modified SQL
 25  SQL>REM      (usually with hints).
 26  SQL>REM
 27  SQL>REM PARAMETERS
 28  SQL>REM   1. ORIGINAL_SQL_ID (required)
 29  SQL>REM   2. MODIFIED_SQL_ID (required)
 30  SQL>REM   3. PLAN_HASH_VALUE (required)
 31  SQL>REM
 32  SQL>REM EXECUTION
 33  SQL>REM   1. Connect into SQL*Plus as user with access to data dictionary
 34  SQL>REM      and privileges to create SQL Profiles. Do not use SYS.
 35  SQL>REM   2. Execute script coe_load_sql_profile.sql passing first two
 36  SQL>REM      parameters inline or until requested by script.
 37  SQL>REM   3. Provide plan hash value of the modified SQL when asked.
 38  SQL>REM   4. Use a DBA user but not SYS. Do not connect as SYS as the staging
 39  SQL>REM      table cannot be created in SYS schema and you will receive an error:
 40  SQL>REM      ORA-19381: cannot create staging table in SYS schema
 41  SQL>REM
 42  SQL>REM EXAMPLE
 43  SQL>REM   # sqlplus system
 44  SQL>REM   SQL> START coe_load_sql_profile.sql gnjy0mn4y9pbm b8f3mbkd8bkgh
 45  SQL>REM   SQL> START coe_load_sql_profile.sql;
 46  SQL>REM
 47  SQL>REM NOTES
 48  SQL>REM   1. This script works on 10g or higher.
 49  SQL>REM   2. For a similar script for 11g use coe_load_sql_baseline.sql,
 50  SQL>REM      which uses SQL Plan Baselines instead of Custom SQL Profiles.
 51  SQL>REM   3. For possible errors see coe_load_sql_profile.log
 52  SQL>REM
 53  SQL>SET TERM ON ECHO OFF;
 54  Parameter 1:
 55  ORIGINAL_SQL_ID (required)
 56  Enter value for 1: amqhp7wtac85x
 57  Parameter 2:
 58  MODIFIED_SQL_ID (required)
 59  Enter value for 2: amqhp7wtac85x
 60       PLAN_HASH_VALUE          AVG_ET_SECS
 61  -------------------- --------------------
 62            1054156218                 .001
 63            3507462345                 .313
 64  Parameter 3:
 65  PLAN_HASH_VALUE (required)
 66  Enter value for 3: 1054156218
 67  Values passed to coe_load_sql_profile:
 68  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 69  ORIGINAL_SQL_ID: "amqhp7wtac85x"
 70  MODIFIED_SQL_ID: "amqhp7wtac85x"
 71  PLAN_HASH_VALUE: "1054156218"
 72  SQL>
 73  SQL>-- trim parameters
 74  SQL>COL original_sql_id NEW_V original_sql_id FOR A30;
 75  SQL>COL modified_sql_id NEW_V modified_sql_id FOR A30;
 76  SQL>COL plan_hash_value NEW_V plan_hash_value FOR A30;
 77  SQL>SELECT TRIM('&&original_sql_id.') original_sql_id, TRIM('&&modified_sql_id.') modified_sql_id, TRIM('&&plan_hash_value.') plan_hash_value FROM DUAL;
 78  ORIGINAL_SQL_ID                MODIFIED_SQL_ID                PLAN_HASH_VALUE
 79  ------------------------------ ------------------------------ ------------------------------
 80  amqhp7wtac85x                  amqhp7wtac85x                  1054156218
 81  SQL>
 82  SQL>-- open log file
 83* SQL>SPO coe_load_sql_profile_&&original_sql_id..log;
 84  .
SQL>
SQL>-- get user
SQL>COL connected_user NEW_V connected_user FOR A30;
SQL>SELECT USER connected_user FROM DUAL;

CONNECTED_USER
------------------------------
ADMIN
SQL>
SQL>VAR sql_text CLOB;
SQL>VAR other_xml CLOB;
SQL>VAR signature NUMBER;
SQL>VAR name VARCHAR2(30);
SQL>
SQL>EXEC :sql_text := NULL;
SQL>EXEC :other_xml := NULL;
SQL>EXEC :signature := NULL;
SQL>EXEC :name := NULL;
SQL>
SQL>-- get sql_text from memory
SQL>DECLARE
  2    l_sql_text VARCHAR2(32767);
  3  BEGIN -- 10g see bug 5017909
  4    FOR i IN (SELECT DISTINCT piece, sql_text
  5  		   FROM gv$sqltext_with_newlines
  6  		  WHERE sql_id = TRIM('&&original_sql_id.')
  7  		  ORDER BY 1, 2)
  8    LOOP
  9  	 IF :sql_text IS NULL THEN
 10  	   DBMS_LOB.CREATETEMPORARY(:sql_text, TRUE);
 11  	   DBMS_LOB.OPEN(:sql_text, DBMS_LOB.LOB_READWRITE);
 12  	 END IF;
 13  	 l_sql_text := REPLACE(i.sql_text, CHR(00), ' ');
 14  	 DBMS_LOB.WRITEAPPEND(:sql_text, LENGTH(l_sql_text), l_sql_text);
 15    END LOOP;
 16    IF :sql_text IS NOT NULL THEN
 17  	 DBMS_LOB.CLOSE(:sql_text);
 18    END IF;
 19  EXCEPTION
 20    WHEN OTHERS THEN
 21  	 DBMS_OUTPUT.PUT_LINE('getting original sql_text from memory: '||SQLERRM);
 22  	 :sql_text := NULL;
 23  END;
 24  /
SQL>
SQL>-- get sql_text from awr
SQL>BEGIN
  2    IF :sql_text IS NULL OR NVL(DBMS_LOB.GETLENGTH(:sql_text), 0) = 0 THEN
  3  	 SELECT REPLACE(sql_text, CHR(00), ' ')
  4  	   INTO :sql_text
  5  	   FROM dba_hist_sqltext
  6  	  WHERE sql_id = TRIM('&&original_sql_id.')
  7  	    AND sql_text IS NOT NULL
  8  	    AND ROWNUM = 1;
  9    END IF;
 10  EXCEPTION
 11    WHEN OTHERS THEN
 12  	 DBMS_OUTPUT.PUT_LINE('getting original sql_text from awr: '||SQLERRM);
 13  	 :sql_text := NULL;
 14  END;
 15  /
SQL>
SQL>-- sql_text as found
SQL>SELECT :sql_text FROM DUAL;

:SQL_TEXT

UPDATE "RMS132"."ORDLOC" x SET x."LOC_TYPE" = :a3,x."UNIT_RETAIL" = :a4,x."QTY_PRESCALED" = :a6,x."QTY_RECEIVED" = :a7,x."LAST_RECEIVED" = :a8,x."LAST_ROUNDED_QTY" = :a9,x."LAST_GRP_ROUNDED_QTY" = :a10,x."ORIGINAL_REPL_QTY" = :a15,x."UNIT_COST" = :a16,x."UNIT_COST_INIT" = :a17,x."COST_SOURCE" = :a18,x."NON_SCALE_IND" = :a19,x."TSF_PO_LINK_NO" = :a20,x."ESTIMATED_INSTOCK_DATE" = :a21,x."QTY_ORDERED" = :a22,x."QTY_CANCELLED" = :a23,x."CANCEL_CODE" = :a24,x."CANCEL_DATE" = :a25,x."CANCEL_ID" = :a26 WHERE x."ORDER_NO" = :b0 AND x."ITEM" = :b1 AND x."LOCATION" = :b2
SQL>
SQL>-- check is sql_text for original sql is available
SQL>SET TERM ON;
SQL>BEGIN
  2    IF :sql_text IS NULL THEN
  3  	 RAISE_APPLICATION_ERROR(-20100, 'SQL_TEXT for original SQL_ID &&original_sql_id. was not found in memory (gv$sqltext_with_newlines) or AWR (dba_hist_sqltext).');
  4    END IF;
  5  END;
  6  /
SQL>SET TERM OFF;
SQL>
SQL>-- get other_xml from memory
SQL>BEGIN
  2    FOR i IN (SELECT other_xml
  3  		   FROM gv$sql_plan
  4  		  WHERE sql_id = TRIM('&&modified_sql_id.')
  5  		    AND plan_hash_value = TO_NUMBER(TRIM('&&plan_hash_value.'))
  6  		    AND other_xml IS NOT NULL
  7  		  ORDER BY
  8  			child_number, id)
  9    LOOP
 10  	 :other_xml := i.other_xml;
 11  	 EXIT; -- 1st
 12    END LOOP;
 13  EXCEPTION
 14    WHEN OTHERS THEN
 15  	 DBMS_OUTPUT.PUT_LINE('getting modified other_xml from memory: '||SQLERRM);
 16  	 :other_xml := NULL;
 17  END;
 18  /
SQL>
SQL>-- get other_xml from awr
SQL>BEGIN
  2    IF :other_xml IS NULL OR NVL(DBMS_LOB.GETLENGTH(:other_xml), 0) = 0 THEN
  3  	 FOR i IN (SELECT other_xml
  4  		     FROM dba_hist_sql_plan
  5  		    WHERE sql_id = TRIM('&&modified_sql_id.')
  6  		      AND plan_hash_value = TO_NUMBER(TRIM('&&plan_hash_value.'))
  7  		      AND other_xml IS NOT NULL
  8  		    ORDER BY
  9  			  id)
 10  	 LOOP
 11  	   :other_xml := i.other_xml;
 12  	   EXIT; -- 1st
 13  	 END LOOP;
 14    END IF;
 15  EXCEPTION
 16    WHEN OTHERS THEN
 17  	 DBMS_OUTPUT.PUT_LINE('getting modified other_xml from awr: '||SQLERRM);
 18  	 :other_xml := NULL;
 19  END;
 20  /
SQL>
SQL>-- other_xml as found
SQL>SELECT :other_xml FROM DUAL;

:OTHER_XML

<other_xml><info type="optimizer_use_stats_on_conventional_dml" note="y">yes</info><info type="has_user_tab">yes</info><info type="db_version">19.0.0.0</info><info type="parse_schema"><![CDATA["GGADMIN"]]></info><info type="plan_hash_full">3327153674</info><info type="plan_hash">1054156218</info><info type="plan_hash_2">416774215</info><peeked_binds><bind nam=":B0" pos="20" dty="1" csi="873" frm="1" mxl="32">3335383038323534</bind><bind nam=":B1" pos="21" dty="1" csi="873" frm="1" mxl="32">313534303032</bind><bind nam=":B2" pos="22" dty="1" csi="873" frm="1" mxl="32">313331</bind></peeked_binds><stats type="compilation"><stat name="bg">6</stat></stats><qb_registry><q o="2" f="y"><n><![CDATA[UPD$1]]></n><f><h><t><![CDATA[X]]></t><s><![CDATA[UPD$1]]></s></h></f></q></qb_registry><outline_data><hint><![CDATA[IGNORE_OPTIM_EMBEDDED_HINTS]]></hint><hint><![CDATA[OPTIMIZER_FEATURES_ENABLE('19.1.0')]]></hint><hint><![CDATA[DB_VERSION('19.1.0')]]></hint><hint><![CDATA[OPT_PARAM('_b_tree_bitmap_plans' 'false')]]></hint><hint><![CDATA[OPT_PARAM('result_cache_mode' 'FORCE')]]></hint><hint><![CDATA[OPT_PARAM('_fix_control' '20648883:0 26552730:1 30142527:1 30539126:1')]]></hint><hint><![CDATA[ALL_ROWS]]></hint><hint><![CDATA[OUTLINE_LEAF(@"UPD$1")]]></hint><hint><![CDATA[INDEX(@"UPD$1" "X"@"UPD$1" ("ORDLOC"."ORDER_NO" "ORDLOC"."ITEM" "ORDLOC"."LOCATION"))]]></hint></outline_data></other_xml>
SQL>
SQL>-- validate other_xml
SQL>SET TERM ON;
SQL>BEGIN
  2    IF :other_xml IS NULL THEN
  3  	 RAISE_APPLICATION_ERROR(-20101, 'PLAN for modified SQL_ID &&modified_sql_id. and PHV &&plan_hash_value. was not found in memory (gv$sql_plan) or AWR (dba_hist_sql_plan).');
  4    END IF;
  5  END;
  6  /
SQL>
SQL>SET ECHO OFF;
0001 BEGIN_OUTLINE_DATA
0002 IGNORE_OPTIM_EMBEDDED_HINTS
0003 OPTIMIZER_FEATURES_ENABLE('19.1.0')
0004 DB_VERSION('19.1.0')
0005 OPT_PARAM('_b_tree_bitmap_plans' 'false')
0006 OPT_PARAM('result_cache_mode' 'FORCE')
0007 OPT_PARAM('_fix_control' '20648883:0 26552730:1 30142527:1 30539126:1')
0008 ALL_ROWS
0009 OUTLINE_LEAF(@"UPD$1")
0010 INDEX(@"UPD$1" "X"@"UPD$1" ("ORDLOC"."ORDER_NO" "ORDLOC"."ITEM" "ORDLOC"."LOCATION"))
0011 END_OUTLINE_DATA
dropping staging table "STGTAB_SQLPROF_AMQHP7WTAC85X"
creating staging table "STGTAB_SQLPROF_AMQHP7WTAC85X"
packaging new sql profile into staging table "STGTAB_SQLPROF_AMQHP7WTAC85X"

PROFILE_NAME
------------------------------
AMQHP7WTAC85X_1054156218
SQL>REM
SQL>REM SQL Profile
SQL>REM ~~~~~~~~~~~
SQL>REM
SQL>SELECT signature, name, category, type, status
  2    FROM dba_sql_profiles WHERE name = :name;

           SIGNATURE NAME                                                                                                                             CATEGORY                                                                                                                         TYPE    STATUS
-------------------- -------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------------------------------------------------------------------------------------------- ------- --------
 7526650967660958446 AMQHP7WTAC85X_1054156218                                                                                                         DEFAULT                                                                                                                          MANUAL  ENABLED
SQL>SELECT description
  2    FROM dba_sql_profiles WHERE name = :name;

DESCRIPTION
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ORIGINAL:AMQHP7WTAC85X MODIFIED:AMQHP7WTAC85X PHV:1054156218 SIGNATURE:7526650967660958446 CREATED BY COE_LOAD_SQL_PROFILE.SQL
SQL>SET ECHO OFF;

****************************************************************************
* Enter ADMIN password to export staging table STGTAB_SQLPROF_amqhp7wtac85x
****************************************************************************


If you need to implement this Custom SQL Profile on a similar system,
import and unpack using these commands:

imp ADMIN file=STGTAB_SQLPROF_amqhp7wtac85x.dmp tables=STGTAB_SQLPROF_amqhp7wtac85x ignore=Y

BEGIN
DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF (
profile_name => 'AMQHP7WTAC85X_1054156218',
replace => TRUE,
staging_table_name => 'STGTAB_SQLPROF_amqhp7wtac85x',
staging_schema_owner => 'ADMIN' );
END;
/

